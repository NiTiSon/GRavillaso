buildscript {
    repositories{
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }
    dependencies {
        classpath "com.github.Anuken.Arc:arc-core:v$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:core:v$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:tools:v$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:v$mindustryVersion"
    }
}

plugins{
    id "java"
}

repositories{
    mavenCentral()
    maven{url "https://jitpack.io"}
}

dependencies{
    annotationProcessor 'com.github.Anuken:jabel:$jabelVersion'
    implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
}

ext{
    sdkRoot = System.getenv("ANDROID_HOME")
    sdkVersion = '32'

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

/// ----------------------------------------------------------

task jarAndroid {
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}
jar {
    dependsOn "core:jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/") {
        include "**"
    }
}
task pack(type: Jar) {
    dependsOn "tools:pack"
    dependsOn "core:jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/") {
        include "**"
    }
}
task deploy(type: Jar) {
    dependsOn jar
    dependsOn jarAndroid
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete { delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}
task deployPack(type: Jar) {
    dependsOn pack
    dependsOn jarAndroid
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete { delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}
task deployPCONLY(type: Jar) {
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}-DesktopOnly.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar")] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
    }
}
task deployPackPCONLY(type: Jar) {
    dependsOn pack
    archiveFileName = "${project.archivesBaseName}-DesktopOnly.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar")] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
    }
}

/// ----------------------------------------------------------

tasks.withType(JavaCompile){
    targetCompatibility = 16
    sourceCompatibility = JavaVersion.VERSION_16
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    compileJava.options.fork = true
    doFirst{
        options.compilerArgs = options.compilerArgs.findAll{it != '--enable-preview' }
    }
}
allprojects {
    apply plugin: "java"

    repositories {
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }

    targetCompatibility = 16
    sourceCompatibility = JavaVersion.VERSION_16

    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release','16'])
    }
    java {
        withJavadocJar()
        withSourcesJar()
    }
}
project(":tools") {
    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")

        implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.22.1'
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$zelauxCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:core:$zelauxCoreVersion"
    }
}
project(":core") {
    apply plugin: "java"

    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
    }
    task sourceJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack") {
        archiveClassifier = 'assets'
        from files("assets") {
            exclude "config", "cache", "music", "sounds"
        }
    }

    artifacts {
        archives sourceJar
        archives assetsJar
    }

    dependencies {
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Zelaux.ZelauxModCore:core:$zelauxCoreVersion"
        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    }

    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {
            if (true) return null;
            def blacklist = [project(":annotations")]
            if (findProject(":android") != null) {
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
}