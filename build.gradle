import java.awt.Desktop

apply plugin: "java"

version '1.0'

targetCompatibility = 16
sourceCompatibility = JavaVersion.VERSION_16

repositories{
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}
/*dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"


}*/
ext{
    //the build number that this mod is made for
    mindustryVersion = "v135"
    zelauxCore = "8dbf4593d2e"
    jabelVersion = "0.6.0"
    sdkVersion = "30"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

    arcModule = { String name ->
        if(name.contains(':')) name = name.split(':').last()
        return "com.github.Anuken.Arc:$name:${mindustryVersion}"
    }
    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}
dependencies{
    implementation  "com.github.Zelaux.ZelauxModCore:core:$zelauxCore"
}
buildscript {
    repositories{
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }
    dependencies {
        classpath "com.github.Anuken.Arc:arc-core:v135"
        classpath "com.github.Anuken.Mindustry:core:v135"
        classpath "com.github.Anuken.Mindustry:tools:v135"
        classpath "com.github.Anuken.Arc:packer:v135"
    }
}
allprojects{

    group = "com.github.NickName73"

    repositories{
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }

    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release','16'])
        
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
        ])
    }
}

project(":tools"){
    apply plugin: "java"

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")

        implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.22.1'
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$zelauxCore"
        implementation "com.github.Zelaux.ZelauxModCore:core:$zelauxCore"
    }
}
project(":core"){
    apply plugin: "java"

    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack") {
        archiveClassifier = 'assets'
        from files("assets") {
            exclude "config", "cache", "music", "sounds"
        }
    }

    artifacts {
        archives sourcesJar
        archives assetsJar
    }

    dependencies {
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$zelauxCore"
        implementation "com.github.Zelaux.ZelauxModCore:core:$zelauxCore"
        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    }

    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {
            if (true) return null;
            def blacklist = [project(":annotations")]
            if (findProject(":android") != null) {
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
}
configure([":core", ":tools"].collect { project(it) }) {
    java {
        withJavadocJar()
        withSourcesJar()
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast {
        //collect dependencies needed for desugaring
        def files = (
                project(":core").configurations.compileClasspath.asList() +
                        project(":core").configurations.runtimeClasspath.asList() +
                        configurations.runtimeClasspath.asList() +
                        [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")]
        )
        def dependencies = files.collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar")
    }
}
jar{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn "core:jar"
    archiveFileName = "${project.archivesBaseName}Desktop.jar"


    from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "icon.png"
    }

    from("core/assets/"){
        include "**"
    }
}

task dexify(type: Jar){
    archiveFileName.set(ArtifactFilename)

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, "raw-$artifactFilename"),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")


    doFirst{
        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])

        exec{
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", pMinApi]
            for(def file : files){
                command += "--classpath"
                command += file.path
            }

            command += ["--output", dexedArtifact, jarArtifact]

            if(isWindows){
                commandLine("cmd", "/c", *command)
            }else{
                commandLine(*command)
            }
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex dependsOn "build", "dexify"

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

task deployWithPack(type: Jar){
    dependsOn "tools:pack"
    dependsOn "deploy"
    deploy.shouldRunAfter "tools:pack"
}

task jarAndSteamLaunch {
    dependsOn "tools:pack"
    dependsOn "jar"
    jar.shouldRunAfter "tools:pack"
    doLast{
        copy {
            from "$buildDir/libs/${project.archivesBaseName}.jar"
            into "A:\\Apps\\steamapps\\common\\Mindustry\\saves\\mods"
        }
        Desktop.desktop.browse "steam://rungameid/1127400".toURI()
    }
}
task jarAndSteamLaunchWithoutPack {
    dependsOn "jar"
    doLast{
        copy {
            from "$buildDir/libs/${project.archivesBaseName}.jar"
            into "A:\\Apps\\steamapps\\common\\Mindustry\\saves\\mods"
        }
        Desktop.desktop.browse "steam://rungameid/1127400".toURI()
    }
}
task jarWithPack {
    dependsOn "tools:pack"
    dependsOn "jar"
    jar.shouldRunAfter "tools:pack"
}

