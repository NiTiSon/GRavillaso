buildscript {
    repositories{
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }
    dependencies {
        classpath "com.github.Anuken.Arc:arc-core:v$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:core:v$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:tools:v$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:v$mindustryVersion"
    }
}

plugins {
    id "java"
}

sourceSets.main{
    java.srcDir("src/")
    resources.srcDir("assets/")
}

repositories{
    mavenCentral()
    maven{url "https://jitpack.io"}
}

dependencies{
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
}

ext{
    sdkRoot = System.getenv("ANDROID_HOME")
    sdkVersion = '30'
}

jar.archiveFileName.set("raw-$artifactName");

def isWindows = System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows");

jar {
    dependsOn "core:jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/") {
        include "**"
    }
}

task dexify(type: Jar){
    archiveFileName.set(artifactName)

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, "raw-$artifactName"),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")


    doFirst{
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])

        exec{
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", "14"]
            for(def file : files){
                command += "--classpath"
                command += file.path
            }

            command += ["--output", dexedArtifact, jarArtifact]

            if(isWindows){
                commandLine("cmd", "/c", *command)
            }else{
                commandLine(*command)
            }
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex dependsOn "build", "dexify"

task buildMove(dependsOn: build){
    doLast{
        copy{
            from "build/libs/raw-GRavillaso.jar"
            into System.getenv("MINDUSTRY_MODS_HOME")
        }
    }
}

tasks.withType(JavaCompile){
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_14
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        options.compilerArgs.addAll(['--release', '8', '--enable-preview'])
    }
    compileJava.options.fork = true
    doFirst{
        options.compilerArgs = options.compilerArgs.findAll{it != '--enable-preview' }
    }
}

allprojects {
    apply plugin: "java"

    repositories {
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }

    targetCompatibility = 16
    sourceCompatibility = JavaVersion.VERSION_16

    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release','16'])
    }
    java {
        withJavadocJar()
        withSourcesJar()
    }
}
project(":tools") {
    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
    }
}
project(":core") {
    apply plugin: "java"

    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
    }
    task sourceJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack") {
        archiveClassifier = 'assets'
        from files("assets") {
            exclude "config", "cache", "music", "sounds"
        }
    }

    artifacts {
        archives sourceJar
        archives assetsJar
    }

    dependencies {
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Zelaux.ZelauxModCore:core:$zelauxCoreVersion"
        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    }

    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {
            if (true) return null;
            def blacklist = [project(":annotations")]
            if (findProject(":android") != null) {
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
}