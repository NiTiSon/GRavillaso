import java.awt.Desktop

apply plugin: "java"

version '1.0'

targetCompatibility = 16
sourceCompatibility = JavaVersion.VERSION_16

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v135'
    jabelVersion = "0.6.0"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

    arcModule = { String name ->
        if(name.contains(':')) name = name.split(':').last()
        return "com.github.Anuken.Arc:$name:${mindustryVersion}"
    }
}

allprojects{

    group = "com.github.NickName73"

    repositories{
        mavenCentral()
        maven{ url 'https://www.jitpack.io' }
    }

    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release','16'])
    }
}

project(":tools"){
    apply plugin: "java"
    compileJava.options.fork = false

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    }
}
project(":core"){
    apply plugin: "java"

    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
    }

    dependencies {
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack") {
        archiveClassifier = 'assets'
        from files("assets") {
            exclude "config", "cache", "music", "sounds"
        }
    }
    artifacts {
        archives sourcesJar
        archives assetsJar
    }
    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {
            if (true) return null;
            def blacklist = [project(":annotations")]
            if (findProject(":android") != null) {
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
}
dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}
jar{
    archiveFileName = "${project.archivesBaseName}.jar"


    from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "icon.png"
    }

    from("core/assets/"){
        include "**"
        setDuplicatesStrategy(DuplicatesStrategy.WARN) //Somewhere is double include ISSUE!!!
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
task steamLaunch {
    doLast{
        copy {
            from "$buildDir/libs/${project.archivesBaseName}.jar"
            into "A:\\Apps\\steamapps\\common\\Mindustry\\saves\\mods"
        }
        Desktop.desktop.browse "steam://rungameid/1127400".toURI()
    }
}
task jarAndSteamLaunch {
    dependsOn jar
    dependsOn steamLaunch
}
